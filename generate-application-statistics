#!/bin/bash

. ./config

for f in config.R ; do
 if [ ! -f $f ] ; then
  eval ./make-$f
 fi
done

orgs="NUS NTU ASTAR GIS IHPC"

# R script to merge output from pbs-report with job application statistics
scripts="PBS-Application-Stats-Clean.R PBS-Application-Stats-Combined.R PBS-Application-Stats-Unknown.R"
# Filter out monthly statistics by organisation
if [ $monthly -eq 1 ] ; then
for org in $orgs ; do
 scripts="$scripts PBS-Application-Stats-$org.R"
done
fi

# Name is referenced in R script above
alljobs="alljobs.$suffix.csv"

# base directory
base=/app/nsccadmin/log

# Merge together all application data
if [ ! -f "$alljobs" ] ; then
for f in $base/printjob/{?,??,???}.csv ; do sort $f | uniq ; done > "$alljobs"
# Tidy up the names
sed -i -e "s/ , /,/" \
 -e "s/gromacs/Gromacs/" \
 -e "s,pmemd.cuda.MPI,AMBER," \
 -e "s,pmemd.cuda,AMBER," \
 -e "s/vasp/VASP/" \
 -e "s/fluent/ANSYS Fluent/" \
 -e "s/quantum_espresso/Quantum Espresso/" \
 -e "s/molpro/Molpro/" \
 -e "s/g09/Gaussian/" \
 -e "s/bioinformatics..STAR/STAR/" \
 -e "s/python_.py_file/python/" \
 -e "s/R_.R_file/R/" \
 -e "s/caffe/Caffe/" \
 -e "s/GA100K/GATK/" \
 -e "s/cpmd.x/CPMD/" \
 -e "s/relion/Relion/" \
 -e "s/openmx/OpenMX/" \
 -e "s/tensorflow/TensorFlow/" \
 -e "s/longranger_python/Longranger/" \
 -e "s/canu_perl/Canu/" \
 -e "s/main_NW.*\.x/main_NW*.x/" \
 -e "s/\$LAMMPS_EXECUTABLE/LAMMPS/" \
 -e "s/\$MDRUN/AMBER/" \
 -e "s/starccm+/STAR-CCM+/" \
 -e "s,unknown,Unknown," \
 "$alljobs"
cat /app/nsccadmin/log/printjob/interactive/{?,??,???}-interactive.csv >> "$alljobs"
fi

# Gather username information and merge with formatted replacements
if [ ! -f usernames.$suffix.csv ] ; then
awk -F\| '{print $2}' pbs-report.cleaned.$suffix.csv | tail -n +3 | sort | uniq | ./get-user-information > usernames-raw.$suffix.csv
module load R
./combine-users.R
fi

type Rscript > /dev/null 2>&1 || module load R
# Run the script to generate csv files with statistics
for script in $scripts ; do
 echo running $script
 Rscript "$script"
done

# Make zip file for each organisation
if [ $monthly -eq 1 ] ; then
for org in $orgs ; do
  rm -rf ${prefix}-${org} && \
  mkdir ${prefix}-${org} && \
  cp -p *.${org}.${suffix}.csv ${prefix}-${org} && \
  rm -f ${prefix}-${org}.zip && \
  zip -r ${prefix}-${org}.zip ${prefix}-${org} && \
  rm -rf ${prefix}-${org}
done

# Copy data to log directory
logdir=$base/usage-statistics
outputfiles=`echo {alldata,top100,total,org,application,user_}*.$suffix.csv`
if [ $monthly -eq 1 ] ; then
 cp -pv $outputfiles $logdir/
 mkdir -p $logdir/by-org
 for org in $orgs ; do
  mv -v $logdir/*.$org.$suffix.csv $logdir/by-org/
 done
else
 mkdir -p $logdir/weekly
 cp -pv $outputfiles $logdir/weekly/
fi

# Set appropriate file permissions on data
for d in "$PWD" "$logdir" ; do
 setfacl -R -bk "$d" ;  chmod -R u+rwX,g+rX,o-rwx "$d" ; chown -R ${LOGNAME}.nscc-proj "$d"
done

# Copy NUS data to Junhong home directory
 if [  ${publish:-0} -eq 1 ] ; then
  cp -ip *.NUS.* ~ccewjh/Monthly_Usage/ < /dev/null
  chown ccewjh.nus ~ccewjh/Monthly_Usage/*
 fi
fi
